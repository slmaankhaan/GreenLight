# ====================================================================================
# HELPERS
# ====================================================================================

## help: print this help message
.PHONY: help
help:
	@echo 'Usage:'
	@sed -n 's/^##//p' ${MAKEFILE_LIST} | column -t -s ':' | sed -e 's/^/ /'

.PHONY: confirm
confirm:
	@echo -n 'Are you sure? [y/N] ' && read ans && [ $${ans:-N} = y ]

# ====================================================================================
# DEVELOPMENT
# ====================================================================================

## run/api: run the cmd/api application
.PHONY: run/api
run/api:
	direnv exec . go run ./cmd/api -db-dsn=${GREENLIGHT_DB_DSN}

## db/psql: connect to the database using psql
.PHONY: db/psql
db/psql:
	direnv exec . psql ${GREENLIGHT_DB_DSN}

## db/migrations/new name=$1: create a new database migration
.PHONY: db/migrations/new
db/migrations/new:
	@test -n "$(name)" || (echo "Error: 'name' is required. Usage: make db/migrations/new name=migration_name" && exit 1)
	@echo "Creating migration files for $(name)..."
	direnv exec . migrate create -seq -ext=.sql -dir=./migrations $(name)

## db/migrations/up: apply all up database migrations
.PHONY: db/migrations/up
db/migrations/up: confirm
	@echo "Running up migrations..."
	direnv exec . migrate -path ./migrations -database ${GREENLIGHT_DB_DSN} up

# ====================================================================================
# QUALITY CONTROL
# ====================================================================================

## audit: tidy and vendor dependencies, format, vet, and test all code
.PHONY: audit
audit: vendor
	@echo 'Formatting code...'
	go fmt ./...
	@echo 'Vetting code...'
	go vet ./...
	staticcheck ./...
	@echo 'Running tests...'
	go test -race -vet=off ./...

## vendor: tidy and vendor dependencies
.PHONY: vendor
vendor:
	@echo 'Tidying and verifying module dependencies...'
	go mod tidy
	go mod verify
	@echo 'Vendoring dependencies...'
	go mod vendor

# ====================================================================================
# BUILD
# ====================================================================================

# Capture the current time in ISO-8601 format
current_time = $(shell date --iso-8601=seconds)
git_description = $(shell git describe --always --dirty --tags --long)
linker_flags = '-s -X main.buildTime=${current_time} -X main.version=${git_description}'

## build/api: build the cmd/api application for local development
.PHONY: build/api
build/api:
	@echo 'Building cmd/api for local environment...'
	go build -ldflags="-s -X 'main.buildTime=${current_time}'" -o ./bin/api ./cmd/api

## build/linux: build the cmd/api application for Linux (amd64)
.PHONY: build/linux
build/linux:
	@echo 'Building cmd/api for Linux (amd64)...'
	GOOS=linux GOARCH=amd64 go build -ldflags="-s -X 'main.buildTime=${current_time}'" -o ./bin/linux_amd64/api ./cmd/api